name: compilation

on:
  pull_request:
    branches-ignores:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-CPP-500-NAN-5-1-rtype-alexandre.guillard.git"
  LINUX_EXECUTABLES: "./r-type_client,./r-type_server"
  WINDOWS_EXECUTABLES: "./r-type_client.exe,./r-type_server.exe"

jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: |
          trash=$(find -regextype posix-extended -regex "^(.*(\.[oa]|(so)|(gc((no)|(da)|(ov)))|(~)|(\/tmp\/.+))|(#.+#))$")
          bool=0
          for trash in $trash
          do
              echo "::error file=${trash},title=Unwanted file detected:: ${trash}"
              bool=1
          done
          if [ "$bool" == 1 ]
          then
              exit 1
          fi
  check_program_linux_compilation:
    runs-on: ubuntu-latest
    needs: check_repository_cleanliness
    container:
      image: epitechcontent/epitest-docker
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: compilation program
      run: |
        cmake -B ./build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release && cmake --build build
        OIFS=$IFS
        IFS=','
        sep=$LINUX_EXECUTABLES
        for sep in $sep
        do
            check=""
            check=$(find -wholename ${sep})
            if [[ ${check} == "" || ! -x "$check" ]]
            then
                exit 1
            fi
        done
    - name: test run
      run: |
        cd build
        ctest --output-on-failure
  check_program_windows_compilation:
    runs-on: windows-latest
    needs: check_repository_cleanliness
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: '3.27.x'
    - name: compilation program
      run: |
        cmake -B ./build -DCMAKE_BUILD_TYPE=Release && cmake --build build
        mv Debug/* ./
        OIFS=$IFS
        IFS=','
        sep=$WINDOWS_EXECUTABLES
        for sep in $sep
        do
            check=""
            check=$(find -wholename ${sep})
            if [[ ${check} == "" || ! -x "$check" ]]
            then
                exit 1
            fi
        done
    - name: test run
      run: |
        cd build
        ctest --output-on-failure
  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [check_program_linux_compilation, check_program_windows_compilation]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
